{"version":3,"sources":["singularOrPlural.test.js"],"names":["getSinguralOrPlural","require","test","expect","toBe","toThrowError"],"mappings":"AAAA,MAAMA,mBAAmB,GAAGC,OAAO,CAAC,oBAAD,CAAnC,C,CAEA;;;AACAC,IAAI,CAAC,qCAAD,EAAwC,MAAM;AAChDC,EAAAA,MAAM,CAACH,mBAAmB,CAAC,CAAD,EAAI,KAAJ,EAAW,KAAX,CAApB,CAAN,CAA6CI,IAA7C,CAAkD,KAAlD;AACD,CAFG,CAAJ;AAGAF,IAAI,CAAC,mCAAD,EAAsC,MAAM;AAC9CC,EAAAA,MAAM,CAACH,mBAAmB,CAAC,CAAD,EAAI,KAAJ,EAAW,MAAX,CAApB,CAAN,CAA8CI,IAA9C,CAAmD,MAAnD;AACD,CAFG,CAAJ;AAIAF,IAAI,CAAC,2BAAD,EAA8B,MAAM;AACtCC,EAAAA,MAAM,CAAC,MAAMH,mBAAmB,CAAC,CAAC,CAAF,EAAK,OAAL,EAAc,QAAd,CAA1B,CAAN,CAAyDK,YAAzD;AACD,CAFG,CAAJ;AAIAH,IAAI,CAAC,oCAAD,EAAuC,MAAM;AAC/CC,EAAAA,MAAM,CAAC,MAAMH,mBAAmB,CAAC,EAAD,EAAK,OAAL,EAAc,QAAd,CAA1B,CAAN,CAAyDK,YAAzD;AACD,CAFG,CAAJ","sourcesContent":["const getSinguralOrPlural = require(\"./singularOrPlural\");\n\n// Exercise 4\ntest(\"Will return singular for value of 1\", () => {\n  expect(getSinguralOrPlural(1, \"man\", \"men\")).toBe(\"man\");\n});\ntest(\"Will return plural for value of 0\", () => {\n  expect(getSinguralOrPlural(0, \"car\", \"cars\")).toBe(\"cars\");\n});\n\ntest(\"Will throw for a negative\", () => {\n  expect(() => getSinguralOrPlural(-1, \"house\", \"houses\")).toThrowError();\n});\n\ntest(\"Will throw for a non-numeric value\", () => {\n  expect(() => getSinguralOrPlural({}, \"giant\", \"giants\")).toThrowError();\n});\n"]}