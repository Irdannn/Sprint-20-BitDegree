fa89c7aeaa9187cdc000b3ba8fb6dd69
const filterBiggestNumbers = require("./filterBiggest"); // Exercise 5


test("Will throw if the first parameter is not an array", () => {
  expect(() => filterBiggestNumbers({})).toThrowError();
});
test("Will return correct output for reasonable input", () => {
  const testInput = [4, 2, 5, 3, 7, 8, 10, 12];
  const got = filterBiggestNumbers(testInput, 7);
  const want = [8, 10, 12];
  const rejects = [4, 2, 5, 3, 6];
  want.forEach(value => expect(got).toContain(value));
  rejects.forEach(value => expect(got).not.toContain(value));
});
test("Will throw if the second argument is not a number", () => {
  expect(() => filterBiggestNumbers([], "")).toThrowError();
});
test("Will work if the second number not an integer", () => {
  const testInput = [4, 2, 5];
  const got = filterBiggestNumbers(testInput, 4.5);
  const want = [5];
  const rejects = [4, 2];
  want.forEach(value => expect(got).toContain(value));
  rejects.forEach(value => expect(got).not.toContain(value));
});
test("Will work if the min is a negative number", () => {
  const testInput = [-4, 4, 2, 5];
  const got = filterBiggestNumbers(testInput, -1);
  const want = [2, 4, 5];
  const rejects = [-4];
  want.forEach(value => expect(got).toContain(value));
  rejects.forEach(value => expect(got).not.toContain(value));
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImZpbHRlckJpZ2dlc3QudGVzdC5qcyJdLCJuYW1lcyI6WyJmaWx0ZXJCaWdnZXN0TnVtYmVycyIsInJlcXVpcmUiLCJ0ZXN0IiwiZXhwZWN0IiwidG9UaHJvd0Vycm9yIiwidGVzdElucHV0IiwiZ290Iiwid2FudCIsInJlamVjdHMiLCJmb3JFYWNoIiwidmFsdWUiLCJ0b0NvbnRhaW4iLCJub3QiXSwibWFwcGluZ3MiOiJBQUFBLE1BQU1BLG9CQUFvQixHQUFHQyxPQUFPLENBQUMsaUJBQUQsQ0FBcEMsQyxDQUVBOzs7QUFDQUMsSUFBSSxDQUFDLG1EQUFELEVBQXNELE1BQU07QUFDOURDLEVBQUFBLE1BQU0sQ0FBQyxNQUFNSCxvQkFBb0IsQ0FBQyxFQUFELENBQTNCLENBQU4sQ0FBdUNJLFlBQXZDO0FBQ0QsQ0FGRyxDQUFKO0FBSUFGLElBQUksQ0FBQyxpREFBRCxFQUFvRCxNQUFNO0FBQzVELFFBQU1HLFNBQVMsR0FBRyxDQUFDLENBQUQsRUFBSSxDQUFKLEVBQU8sQ0FBUCxFQUFVLENBQVYsRUFBYSxDQUFiLEVBQWdCLENBQWhCLEVBQW1CLEVBQW5CLEVBQXVCLEVBQXZCLENBQWxCO0FBQ0EsUUFBTUMsR0FBRyxHQUFHTixvQkFBb0IsQ0FBQ0ssU0FBRCxFQUFZLENBQVosQ0FBaEM7QUFDQSxRQUFNRSxJQUFJLEdBQUcsQ0FBQyxDQUFELEVBQUksRUFBSixFQUFRLEVBQVIsQ0FBYjtBQUNBLFFBQU1DLE9BQU8sR0FBRyxDQUFDLENBQUQsRUFBSSxDQUFKLEVBQU8sQ0FBUCxFQUFVLENBQVYsRUFBYSxDQUFiLENBQWhCO0FBRUFELEVBQUFBLElBQUksQ0FBQ0UsT0FBTCxDQUFjQyxLQUFELElBQVdQLE1BQU0sQ0FBQ0csR0FBRCxDQUFOLENBQVlLLFNBQVosQ0FBc0JELEtBQXRCLENBQXhCO0FBQ0FGLEVBQUFBLE9BQU8sQ0FBQ0MsT0FBUixDQUFpQkMsS0FBRCxJQUFXUCxNQUFNLENBQUNHLEdBQUQsQ0FBTixDQUFZTSxHQUFaLENBQWdCRCxTQUFoQixDQUEwQkQsS0FBMUIsQ0FBM0I7QUFDRCxDQVJHLENBQUo7QUFVQVIsSUFBSSxDQUFDLG1EQUFELEVBQXNELE1BQU07QUFDOURDLEVBQUFBLE1BQU0sQ0FBQyxNQUFNSCxvQkFBb0IsQ0FBQyxFQUFELEVBQUssRUFBTCxDQUEzQixDQUFOLENBQTJDSSxZQUEzQztBQUNELENBRkcsQ0FBSjtBQUlBRixJQUFJLENBQUMsK0NBQUQsRUFBa0QsTUFBTTtBQUMxRCxRQUFNRyxTQUFTLEdBQUcsQ0FBQyxDQUFELEVBQUksQ0FBSixFQUFPLENBQVAsQ0FBbEI7QUFDQSxRQUFNQyxHQUFHLEdBQUdOLG9CQUFvQixDQUFDSyxTQUFELEVBQVksR0FBWixDQUFoQztBQUNBLFFBQU1FLElBQUksR0FBRyxDQUFDLENBQUQsQ0FBYjtBQUNBLFFBQU1DLE9BQU8sR0FBRyxDQUFDLENBQUQsRUFBSSxDQUFKLENBQWhCO0FBRUFELEVBQUFBLElBQUksQ0FBQ0UsT0FBTCxDQUFjQyxLQUFELElBQVdQLE1BQU0sQ0FBQ0csR0FBRCxDQUFOLENBQVlLLFNBQVosQ0FBc0JELEtBQXRCLENBQXhCO0FBQ0FGLEVBQUFBLE9BQU8sQ0FBQ0MsT0FBUixDQUFpQkMsS0FBRCxJQUFXUCxNQUFNLENBQUNHLEdBQUQsQ0FBTixDQUFZTSxHQUFaLENBQWdCRCxTQUFoQixDQUEwQkQsS0FBMUIsQ0FBM0I7QUFDRCxDQVJHLENBQUo7QUFVQVIsSUFBSSxDQUFDLDJDQUFELEVBQThDLE1BQU07QUFDdEQsUUFBTUcsU0FBUyxHQUFHLENBQUMsQ0FBQyxDQUFGLEVBQUssQ0FBTCxFQUFRLENBQVIsRUFBVyxDQUFYLENBQWxCO0FBQ0EsUUFBTUMsR0FBRyxHQUFHTixvQkFBb0IsQ0FBQ0ssU0FBRCxFQUFZLENBQUMsQ0FBYixDQUFoQztBQUNBLFFBQU1FLElBQUksR0FBRyxDQUFDLENBQUQsRUFBSSxDQUFKLEVBQU8sQ0FBUCxDQUFiO0FBQ0EsUUFBTUMsT0FBTyxHQUFHLENBQUMsQ0FBQyxDQUFGLENBQWhCO0FBRUFELEVBQUFBLElBQUksQ0FBQ0UsT0FBTCxDQUFjQyxLQUFELElBQVdQLE1BQU0sQ0FBQ0csR0FBRCxDQUFOLENBQVlLLFNBQVosQ0FBc0JELEtBQXRCLENBQXhCO0FBQ0FGLEVBQUFBLE9BQU8sQ0FBQ0MsT0FBUixDQUFpQkMsS0FBRCxJQUFXUCxNQUFNLENBQUNHLEdBQUQsQ0FBTixDQUFZTSxHQUFaLENBQWdCRCxTQUFoQixDQUEwQkQsS0FBMUIsQ0FBM0I7QUFDRCxDQVJHLENBQUoiLCJzb3VyY2VzQ29udGVudCI6WyJjb25zdCBmaWx0ZXJCaWdnZXN0TnVtYmVycyA9IHJlcXVpcmUoXCIuL2ZpbHRlckJpZ2dlc3RcIik7XG5cbi8vIEV4ZXJjaXNlIDVcbnRlc3QoXCJXaWxsIHRocm93IGlmIHRoZSBmaXJzdCBwYXJhbWV0ZXIgaXMgbm90IGFuIGFycmF5XCIsICgpID0+IHtcbiAgZXhwZWN0KCgpID0+IGZpbHRlckJpZ2dlc3ROdW1iZXJzKHt9KSkudG9UaHJvd0Vycm9yKCk7XG59KTtcblxudGVzdChcIldpbGwgcmV0dXJuIGNvcnJlY3Qgb3V0cHV0IGZvciByZWFzb25hYmxlIGlucHV0XCIsICgpID0+IHtcbiAgY29uc3QgdGVzdElucHV0ID0gWzQsIDIsIDUsIDMsIDcsIDgsIDEwLCAxMl07XG4gIGNvbnN0IGdvdCA9IGZpbHRlckJpZ2dlc3ROdW1iZXJzKHRlc3RJbnB1dCwgNyk7XG4gIGNvbnN0IHdhbnQgPSBbOCwgMTAsIDEyXTtcbiAgY29uc3QgcmVqZWN0cyA9IFs0LCAyLCA1LCAzLCA2XTtcblxuICB3YW50LmZvckVhY2goKHZhbHVlKSA9PiBleHBlY3QoZ290KS50b0NvbnRhaW4odmFsdWUpKTtcbiAgcmVqZWN0cy5mb3JFYWNoKCh2YWx1ZSkgPT4gZXhwZWN0KGdvdCkubm90LnRvQ29udGFpbih2YWx1ZSkpO1xufSk7XG5cbnRlc3QoXCJXaWxsIHRocm93IGlmIHRoZSBzZWNvbmQgYXJndW1lbnQgaXMgbm90IGEgbnVtYmVyXCIsICgpID0+IHtcbiAgZXhwZWN0KCgpID0+IGZpbHRlckJpZ2dlc3ROdW1iZXJzKFtdLCBcIlwiKSkudG9UaHJvd0Vycm9yKCk7XG59KTtcblxudGVzdChcIldpbGwgd29yayBpZiB0aGUgc2Vjb25kIG51bWJlciBub3QgYW4gaW50ZWdlclwiLCAoKSA9PiB7XG4gIGNvbnN0IHRlc3RJbnB1dCA9IFs0LCAyLCA1XTtcbiAgY29uc3QgZ290ID0gZmlsdGVyQmlnZ2VzdE51bWJlcnModGVzdElucHV0LCA0LjUpO1xuICBjb25zdCB3YW50ID0gWzVdO1xuICBjb25zdCByZWplY3RzID0gWzQsIDJdO1xuXG4gIHdhbnQuZm9yRWFjaCgodmFsdWUpID0+IGV4cGVjdChnb3QpLnRvQ29udGFpbih2YWx1ZSkpO1xuICByZWplY3RzLmZvckVhY2goKHZhbHVlKSA9PiBleHBlY3QoZ290KS5ub3QudG9Db250YWluKHZhbHVlKSk7XG59KTtcblxudGVzdChcIldpbGwgd29yayBpZiB0aGUgbWluIGlzIGEgbmVnYXRpdmUgbnVtYmVyXCIsICgpID0+IHtcbiAgY29uc3QgdGVzdElucHV0ID0gWy00LCA0LCAyLCA1XTtcbiAgY29uc3QgZ290ID0gZmlsdGVyQmlnZ2VzdE51bWJlcnModGVzdElucHV0LCAtMSk7XG4gIGNvbnN0IHdhbnQgPSBbMiwgNCwgNV07XG4gIGNvbnN0IHJlamVjdHMgPSBbLTRdO1xuXG4gIHdhbnQuZm9yRWFjaCgodmFsdWUpID0+IGV4cGVjdChnb3QpLnRvQ29udGFpbih2YWx1ZSkpO1xuICByZWplY3RzLmZvckVhY2goKHZhbHVlKSA9PiBleHBlY3QoZ290KS5ub3QudG9Db250YWluKHZhbHVlKSk7XG59KTtcbiJdfQ==