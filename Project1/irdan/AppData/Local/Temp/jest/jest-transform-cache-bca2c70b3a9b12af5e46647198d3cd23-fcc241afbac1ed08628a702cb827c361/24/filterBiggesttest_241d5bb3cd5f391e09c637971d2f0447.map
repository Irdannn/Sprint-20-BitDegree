{"version":3,"sources":["filterBiggest.test.js"],"names":["filterBiggestNumbers","require","test","expect","toThrowError","testInput","got","want","rejects","forEach","value","toContain","not"],"mappings":"AAAA,MAAMA,oBAAoB,GAAGC,OAAO,CAAC,iBAAD,CAApC,C,CAEA;;;AACAC,IAAI,CAAC,mDAAD,EAAsD,MAAM;AAC9DC,EAAAA,MAAM,CAAC,MAAMH,oBAAoB,CAAC,EAAD,CAA3B,CAAN,CAAuCI,YAAvC;AACD,CAFG,CAAJ;AAIAF,IAAI,CAAC,iDAAD,EAAoD,MAAM;AAC5D,QAAMG,SAAS,GAAG,CAAC,CAAD,EAAI,CAAJ,EAAO,CAAP,EAAU,CAAV,EAAa,CAAb,EAAgB,CAAhB,EAAmB,EAAnB,EAAuB,EAAvB,CAAlB;AACA,QAAMC,GAAG,GAAGN,oBAAoB,CAACK,SAAD,EAAY,CAAZ,CAAhC;AACA,QAAME,IAAI,GAAG,CAAC,CAAD,EAAI,EAAJ,EAAQ,EAAR,CAAb;AACA,QAAMC,OAAO,GAAG,CAAC,CAAD,EAAI,CAAJ,EAAO,CAAP,EAAU,CAAV,EAAa,CAAb,CAAhB;AAEAD,EAAAA,IAAI,CAACE,OAAL,CAAcC,KAAD,IAAWP,MAAM,CAACG,GAAD,CAAN,CAAYK,SAAZ,CAAsBD,KAAtB,CAAxB;AACAF,EAAAA,OAAO,CAACC,OAAR,CAAiBC,KAAD,IAAWP,MAAM,CAACG,GAAD,CAAN,CAAYM,GAAZ,CAAgBD,SAAhB,CAA0BD,KAA1B,CAA3B;AACD,CARG,CAAJ;AAUAR,IAAI,CAAC,mDAAD,EAAsD,MAAM;AAC9DC,EAAAA,MAAM,CAAC,MAAMH,oBAAoB,CAAC,EAAD,EAAK,EAAL,CAA3B,CAAN,CAA2CI,YAA3C;AACD,CAFG,CAAJ;AAIAF,IAAI,CAAC,+CAAD,EAAkD,MAAM;AAC1D,QAAMG,SAAS,GAAG,CAAC,CAAD,EAAI,CAAJ,EAAO,CAAP,CAAlB;AACA,QAAMC,GAAG,GAAGN,oBAAoB,CAACK,SAAD,EAAY,GAAZ,CAAhC;AACA,QAAME,IAAI,GAAG,CAAC,CAAD,CAAb;AACA,QAAMC,OAAO,GAAG,CAAC,CAAD,EAAI,CAAJ,CAAhB;AAEAD,EAAAA,IAAI,CAACE,OAAL,CAAcC,KAAD,IAAWP,MAAM,CAACG,GAAD,CAAN,CAAYK,SAAZ,CAAsBD,KAAtB,CAAxB;AACAF,EAAAA,OAAO,CAACC,OAAR,CAAiBC,KAAD,IAAWP,MAAM,CAACG,GAAD,CAAN,CAAYM,GAAZ,CAAgBD,SAAhB,CAA0BD,KAA1B,CAA3B;AACD,CARG,CAAJ;AAUAR,IAAI,CAAC,2CAAD,EAA8C,MAAM;AACtD,QAAMG,SAAS,GAAG,CAAC,CAAC,CAAF,EAAK,CAAL,EAAQ,CAAR,EAAW,CAAX,CAAlB;AACA,QAAMC,GAAG,GAAGN,oBAAoB,CAACK,SAAD,EAAY,CAAC,CAAb,CAAhC;AACA,QAAME,IAAI,GAAG,CAAC,CAAD,EAAI,CAAJ,EAAO,CAAP,CAAb;AACA,QAAMC,OAAO,GAAG,CAAC,CAAC,CAAF,CAAhB;AAEAD,EAAAA,IAAI,CAACE,OAAL,CAAcC,KAAD,IAAWP,MAAM,CAACG,GAAD,CAAN,CAAYK,SAAZ,CAAsBD,KAAtB,CAAxB;AACAF,EAAAA,OAAO,CAACC,OAAR,CAAiBC,KAAD,IAAWP,MAAM,CAACG,GAAD,CAAN,CAAYM,GAAZ,CAAgBD,SAAhB,CAA0BD,KAA1B,CAA3B;AACD,CARG,CAAJ","sourcesContent":["const filterBiggestNumbers = require(\"./filterBiggest\");\n\n// Exercise 5\ntest(\"Will throw if the first parameter is not an array\", () => {\n  expect(() => filterBiggestNumbers({})).toThrowError();\n});\n\ntest(\"Will return correct output for reasonable input\", () => {\n  const testInput = [4, 2, 5, 3, 7, 8, 10, 12];\n  const got = filterBiggestNumbers(testInput, 7);\n  const want = [8, 10, 12];\n  const rejects = [4, 2, 5, 3, 6];\n\n  want.forEach((value) => expect(got).toContain(value));\n  rejects.forEach((value) => expect(got).not.toContain(value));\n});\n\ntest(\"Will throw if the second argument is not a number\", () => {\n  expect(() => filterBiggestNumbers([], \"\")).toThrowError();\n});\n\ntest(\"Will work if the second number not an integer\", () => {\n  const testInput = [4, 2, 5];\n  const got = filterBiggestNumbers(testInput, 4.5);\n  const want = [5];\n  const rejects = [4, 2];\n\n  want.forEach((value) => expect(got).toContain(value));\n  rejects.forEach((value) => expect(got).not.toContain(value));\n});\n\ntest(\"Will work if the min is a negative number\", () => {\n  const testInput = [-4, 4, 2, 5];\n  const got = filterBiggestNumbers(testInput, -1);\n  const want = [2, 4, 5];\n  const rejects = [-4];\n\n  want.forEach((value) => expect(got).toContain(value));\n  rejects.forEach((value) => expect(got).not.toContain(value));\n});\n"]}