{"version":3,"sources":["add.test.js"],"names":["add","require","test","expect","toBe"],"mappings":"AAAA,MAAMA,GAAG,GAAGC,OAAO,CAAC,OAAD,CAAnB,C,CAEA;;;AACAC,IAAI,CAAC,2DAAD,EAA8D,MAAM;AACtE;AACA;AACAC,EAAAA,MAAM,CAACH,GAAG,CAAC,CAAD,EAAI,CAAJ,CAAJ,CAAN,CAAkBI,IAAlB,CAAuB,CAAvB;AACD,CAJG,CAAJ,C,CAMA;;AACAF,IAAI,CAAC,+CAAD,EAAkD,MAAM;AAC1D;AACA;AACAC,EAAAA,MAAM,CAACH,GAAG,CAAC,CAAC,CAAF,EAAK,CAAC,CAAN,CAAJ,CAAN,CAAoBI,IAApB,CAAyB,CAAC,CAA1B;AACD,CAJG,CAAJ,C,CAMA;;AACAF,IAAI,CAAC,6DAAD,EAAgE,MAAM,CACxE;AACA;AACA;AACA;AACA;AACD,CANG,CAAJ","sourcesContent":["const add = require(\"./add\");\n\n// Exercise 1\ntest(\"Test that add returns the correct result from two numbers\", () => {\n  // ✅ Use the add function to add two numbers\n  // ✅ Expect the value toBe the right value\n  expect(add(4, 2)).toBe(6);\n});\n\n// Exercise 2\ntest(\"Test that the add works with negative numbers\", () => {\n  // ✅ Use the add function to add two numbers with at least one of them negative\n  // ✅ Expect the value toBe the right value\n  expect(add(-2, -5)).toBe(-7);\n});\n\n// Exercise 3\ntest(\"Test that there will be an error if you pass in non-numbers\", () => {\n  // ✅ Use the add function to add two values with at least one of them not a number\n  // ✅ Expect the function to throw\n  // expect(() => add(1, \"1\")).toThrowError();\n  // expect(() => add(true, 2)).toThrowError();\n  // expect(() => add([], {})).toThrowError();\n});\n"]}